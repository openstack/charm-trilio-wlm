# This file is managed by Juju - changes will be overwritten
[DEFAULT]
log_dir = /var/log/workloadmgr
use_syslog = False
use_stderr = False

{% if cluster.internal_addresses -%}
triliovault_hostnames = {{ ','.join(cluster.internal_addresses) }}
{% endif -%}

api_workers = {{ options.workers }}
workloads_workers = {{ options.workers }}

config_status = configured

{% if amqp.transport_url -%}
transport_url = {{ amqp.transport_url }}
rabbit_virtual_host = {{ amqp.vhost }}
{% endif -%}

{% if shared_db.host -%}
sql_connection = {{ shared_db.uri }}
{% endif -%}

compute_driver = libvirt.LibvirtDriver
state_path = /var/lib/workloadmgr
rootwrap_config = /etc/workloadmgr/rootwrap.conf
api_paste_config = /etc/workloadmgr/api-paste.ini
osapi_workloads_listen_port = {{ options.service_listen_info.workloadmgr_api.port }}

verbose = {{ options.verbose }}
debug = {{ options.debug }}

glance_production_host = {{ identity_service.glance_url }}
glance_production_api_servers = {{ identity_service.glance_url }}
cinder_production_endpoint_template = {{ identity_service.cinder_url }}
nova_production_endpoint_template = {{ identity_service.nova_url }}
neutron_production_url = {{ identity_service.neutron_url }}

trustee_role = {{ options.trustee_role }}

global_job_scheduler_override = False

region_name_for_services = {{ options.region }}

{% if identity_service.auth_host -%}

nova_admin_auth_url = {{ identity_service.auth_protocol }}://{{ identity_service.auth_host }}:{{ identity_service.auth_port }}/v{{ identity_service.api_version }}
neutron_admin_auth_url = {{ identity_service.auth_protocol }}://{{ identity_service.auth_host }}:{{ identity_service.auth_port }}/v{{ identity_service.api_version }}
keystone_endpoint_url = {{ identity_service.auth_protocol }}://{{ identity_service.auth_host }}:{{ identity_service.auth_port }}/v{{ identity_service.api_version }}

{% if identity_service.service_domain -%}
domain_name = {{ identity_service.service_domain_id }}
triliovault_user_domain_id = {{ identity_service.service_domain_id }}
{% endif -%}

{% endif -%}

cloud_unique_id = {{ identity_service.admin_user_id }}
cloud_admin_user_id = {{ identity_service.admin_user_id }}
cloud_admin_domain = {{ identity_service.admin_domain_id }}
cloud_admin_project_id  = {{ identity_service.admin_project_id }}
cloud_admin_role = Admin

keystone_auth_version = {{ identity_service.api_version }}
glance_api_version = 2

vault_data_directory = /var/triliovault-mounts
vault_data_directory_old = /var/triliovault
vault_storage_das_device = none

vault_storage_type = {{ options.translated_backup_target_type }}

{% if options.translated_backup_target_type == 'nfs' -%}
vault_storage_nfs_export = {{ options.nfs_shares }}
vault_storage_nfs_options = {{ options.nfs_options }}
{% endif -%}

{% if options.translated_backup_target_type == 's3' -%}
# S3
vault_storage_nfs_export = TrilioVault
vault_s3_auth_version = DEFAULT
vault_s3_access_key_id = {{ options.tv_s3_access_key }}
vault_s3_secret_access_key = {{ options.tv_s3_secret_key }}
vault_s3_region_name =  {{ options.tv_s3_region_name }}
vault_s3_bucket =  {{ options.tv_s3_bucket }}
vault_s3_endpoint_url =  {{ options.tv_s3_endpoint_url }}
{% endif -%}

{% if identity_service.auth_host -%}
# NOTE(jamespage): Trilio needs versioned endpoints in the keystone_authtoken section
# as well as a load of other deprecreated/legacy configuration options
[keystone_authtoken]
auth_uri = {{ identity_service.service_protocol }}://{{ identity_service.service_host }}:{{ identity_service.service_port }}/v{{ identity_service.api_version }}
auth_url = {{ identity_service.auth_protocol }}://{{ identity_service.auth_host }}:{{ identity_service.auth_port }}/v{{ identity_service.api_version }}
www_authenticate_uri = {{ identity_service.auth_protocol }}://{{ identity_service.auth_host }}:{{ identity_service.auth_port }}/v{{ identity_service.api_version }}
auth_type = password
{% if identity_service.service_domain -%}
project_domain_name = {{ identity_service.service_domain }}
user_domain_name = {{ identity_service.service_domain }}
project_domain_id = {{ identity_service.service_domain_id }}
user_domain_id = {{ identity_service.service_domain_id }}
{% else %}
project_domain_name = default
user_domain_name = default
{% endif -%}
project_name = services
username = {{ identity_service.service_username }}
password = {{ identity_service.service_password }}
admin_password = {{ identity_service.service_password }}
admin_user = {{ identity_service.service_username }}
admin_tenant_name = services
{% if identity_service.signing_dir -%}
signing_dir = {{ identity_service.signing_dir }}
{% endif -%}
{% if options.use_memcache == true -%}
memcached_servers = {{ options.memcache_url }}
{% endif -%}
# endofhacks
{% endif -%}

[clients]
endpoint_type = internal
